server {
    listen       443;
    server_name  hass.blakeshome.com;

    ssl_certificate /etc/ssl/private/*.blakeshome.com/fullchain.cer;
    ssl_certificate_key /etc/ssl/private/*.blakeshome.com/*.blakeshome.com.key;

    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";
    ssl on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;

    location @error401 {
      return 401 "Not authorized";
    }

    location /oauth2/auth {
      internal;
      proxy_pass http://127.0.0.1:4180;
      proxy_set_header Host                    $host;
      proxy_set_header X-Real-IP               $remote_addr;
      proxy_set_header X-Scheme                $scheme;
      proxy_set_header X-Auth-Request-Redirect $arg_rd;
    }

    location / {
      proxy_set_header X-Real-IP $remote_addr;
      proxy_pass http://localhost:8123;
      proxy_set_header Host $host;
      proxy_http_version 1.1;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";

      # inject window.externalApp into documents
      sub_filter '<head>' '<head><script>window.externalApp={getExternalAuth:function(){fetch("/api/get_token").then((resp) => resp.text()).then(function(data) {window.externalAuthSetToken(true,{"access_token":data,"expires_in":2592000});}).catch(function(error) {window.externalAuthSetToken(false);});},revokeExternalAuth:function(){window.externalAuthRevokeToken(false);}};</script>';
      sub_filter_once on;

      # redirect the frontend to use external auth when it attempts to authorize
      location /auth/authorize {
        auth_request /oauth2/auth;
        return 301 /?external_auth=1;
      }
      
      # endpoint for returning tokens with njs based on email
      location /api/get_token {
        auth_request /oauth2/auth;
        auth_request_set $email $upstream_http_x_auth_request_email;
        js_content get_token;
      }

      location /api {
        auth_request /oauth2/auth;
        proxy_pass http://localhost:8123;
      }

      location ^~ /api/google_assistant {
        auth_request off;
        proxy_pass http://localhost:8123;
      }

      location ^~ /api/tts_proxy/ {
        auth_request off;
        proxy_pass http://localhost:8123;
      }

      location /api/notify.html5/callback {
        auth_request off;
        proxy_set_header Authorization $http_authorization;
        if ($http_authorization = "") { return 403; }
        proxy_pass http://localhost:8123;
      }
    }
}